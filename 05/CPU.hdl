// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Not(in=instruction[15], out=isACode);
    Or(a=false, b=instruction[15], out=isCCode);

    // WriteM     
    And(a=isCCode, b=instruction[3], out=writeM);
    And(a=isCCode, b=instruction[4], out=LoadD);
    And(a=isCCode, b=instruction[5], out=LoadA1);
    Or(a=LoadA1, b=isACode, out=LoadA);

    Mux16(a=instruction, b=ALUOut, sel=isCCode, out=AIn);

    // Register A
    ARegister(in=AIn, load=LoadA, out=AOut);

    // AddressM
    Or16(a=false, b=AOut, out[0..14]=addressM);

    // 10110 11101 00000
    // Choose A or M to ALU
    Mux16(a=AOut, b=inM, sel=instruction[12], out=AorM);

    // Register D
    DRegister(in=ALUOut, load=LoadD, out=DOut);

    Or(a=false, b=instruction[11], out=ALUzx);
    Or(a=false, b=instruction[10], out=ALUnx);
    Or(a=false, b=instruction[9], out=ALUzy);
    Or(a=false, b=instruction[8], out=ALUny);
    Or(a=false, b=instruction[7], out=ALUf);
    Or(a=false, b=instruction[6], out=ALUno);

    // ALU
    ALU(
        out=ALUOut, 
        zr=zr, 
        ng=ng,
        y=AorM, 
        x=DOut,
        zx=ALUzx, 
        nx=ALUnx, 
        zy=ALUzy,
        ny=ALUny, 
        f=ALUf, 
        no=ALUno
    );

    Or16(a=false, b=ALUOut, out=outM);

    Not(in=ng, out=notng);

    Not(in=zr, out=notzr);
    And(a=notzr, b=notng, out=gtz);

    And(a=instruction[2],b=ng,out=j1);
    And(a=instruction[1],b=zr,out=j2);
    And(a=instruction[0],b=gtz,out=j3);

    Or(a=j1, b=j2, out=j12);
    Or(a=j12, b=j3, out=jmp);

    And(a=jmp,b=instruction[15], out=jmp2);

    Not(in=jmp2, out=notjmp);

    PC(in=AOut, load=jmp2, inc=notjmp, reset=reset, out[0..14]=pc);
}